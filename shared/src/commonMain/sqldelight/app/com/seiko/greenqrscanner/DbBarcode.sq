import com.seiko.greenqrscanner.data.model.BarcodeFormat;
import com.seiko.greenqrscanner.data.model.BarcodeType;


CREATE TABLE IF NOT EXISTS DbBarcode (
    raw_value TEXT NOT NULL PRIMARY KEY,
    format TEXT AS BarcodeFormat NOT NULL,
    type TEXT AS BarcodeType NOT NULL,
    is_star INTEGER NOT NULL,
    update_time INTEGER NOT NULL,
    create_time INTEGER NOT NULL
);

upset {
UPDATE DbBarcode
  SET update_time = :update_time,
  format = :barcode_format,
  type = :barcode_type
  WHERE raw_value = :barcode;

INSERT OR IGNORE INTO DbBarcode(
  raw_value, format, type,
  is_star, update_time, create_time
)
VALUES (
  :barcode, :barcode_format, :barcode_type,
  0, :update_time, :update_time
);
}

load:
SELECT * FROM DbBarcode WHERE raw_value = :barcode;

getHistoryCount:
SELECT count(1) FROM DbBarcode;

getStarsCount:
SELECT count(1) FROM DbBarcode WHERE is_star = 1;

setStar:
UPDATE DbBarcode SET is_star = :isStar WHERE raw_value = :rawValue;

getHistory:
SELECT *
FROM DbBarcode
ORDER BY update_time DESC
LIMIT :limit OFFSET :offset;

getStars:
SELECT *
FROM DbBarcode WHERE is_star = 1
ORDER BY update_time DESC
LIMIT :limit OFFSET :offset;
